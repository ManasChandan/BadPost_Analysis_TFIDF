# -*- coding: utf-8 -*-
"""Twitter Analysis 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10UImuTn-3j1YaGsPSMMP6p4gJasU2ezs
"""

import numpy as np
import pandas as pd

train_data = pd.read_csv('train.csv')
test_data = pd.read_csv('test.csv')
train_data = train_data.drop('id',axis=1)

import seaborn as sns
sns.countplot(train_data['label'])

size = train_data.shape[0]
print(size)

import nltk
import re
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer

def prepare_corpus(tweets):
  corpus_tweets = []
  size = tweets.shape[0]
  ps = PorterStemmer()
  for i in range(0,size):
    tweet = re.sub(pattern='[^a-zA-Z]',repl=' ', string=tweets['tweet'][i])

    tweet = re.sub(pattern='user' , repl='' , string = tweet)

    tweet = tweet.lower()

    words = tweet.split()

    words = [ps.stem(word) for word in words if not word in stopwords.words('english')]

    tweet = ' '.join(words)

    corpus_tweets.append(tweet)
  return corpus_tweets

corpus_tweets_train = prepare_corpus(train_data)

from sklearn.feature_extraction.text import TfidfVectorizer
tfidf = TfidfVectorizer(max_features=1000)
X_tfidf = tfidf.fit_transform(corpus_tweets_train).toarray()
y_ifidf = train_data['label'].values

from sklearn.model_selection import train_test_split
def split_train_test(X,y):
  X_train , X_test , y_train , y_test = train_test_split(X,y,test_size=0.10)
  return X_train , X_test , y_train , y_test

X_train_idf , X_test_idf , y_train_idf , y_test_idf = split_train_test(X_tfidf, y_ifidf)

from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
def accuracy_check(model,data,label):
  y_pred = model.predict(data)
  print(classification_report(label , y_pred)) 
  accuracy = accuracy_score(label , y_pred)
  return accuracy

nb_idf = MultinomialNB()
nb_idf.fit(X_train_idf , y_train_idf)
nb_idf_accuracy = accuracy_check(nb_idf , X_test_idf , y_test_idf)
print(nb_idf_accuracy)

def optimization_idf(X_train_idf , X_test_idf , y_train_idf , y_test_idf):
  best_accuracy = 0.0
  alpha_val = 0.0
  for i in np.arange(0.1,1.1,0.1):
    temp_classifier = MultinomialNB(alpha=i)
    temp_classifier.fit(X_train_idf, y_train_idf)
    temp_y_pred = temp_classifier.predict(X_test_idf)
    score = accuracy_score(y_test_idf, temp_y_pred)
    print("Accuracy score for alpha={} is: {}%".format(round(i,1), round(score*100,2)))
    if score>best_accuracy:
      best_accuracy = score
      alpha_val = i
  print('The best accuracy is {}% with alpha value as {}'.format(round(best_accuracy*100, 2), round(alpha_val,1)))
  return alpha_val

optimal_value_idf = optimization_idf(X_train_idf , X_test_idf , y_train_idf , y_test_idf)

ml_model_final = MultinomialNB(alpha = optimal_value_idf)
ml_model_final.fit(X_tfidf , y_ifidf)

test_data.head()

corpus_test = prepare_corpus(test_data)
vectors = tfidf.transform(corpus_test).toarray()

answer = ml_model_final.predict(vectors)
print(answer)

answer.shape

ones = [ans for ans in answer if ans==1]
len(ones)